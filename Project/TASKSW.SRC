; .\TASKSW.SRC generated from: ..\51OS\TASKSW.c
; COMPILER INVOKED BY:
;        C:\Keil_v5\C51\BIN\C51.EXE ..\51OS\TASKSW.c OPTIMIZE(8,SPEED) BROWSE INCDIR(..\51OS;..\APP;..\BSP;..\HARDWARE;..\..\51-OS;..\Project) DEBUG OBJECTEXTEND PRINT(.\TASKSW.lst) TABS(2) SRC(.\TASKSW.SRC)

$NOMOD51

NAME	TASKSW

P0	DATA	080H
P1	DATA	090H
P2	DATA	0A0H
P3	DATA	0B0H
T0	BIT	0B0H.4
AC	BIT	0D0H.6
T1	BIT	0B0H.5
T2	BIT	090H.0
EA	BIT	0A8H.7
IE	DATA	0A8H
EXF2	BIT	0C8H.6
RD	BIT	0B0H.7
ES	BIT	0A8H.4
IP	DATA	0B8H
RI	BIT	098H.0
INT0	BIT	0B0H.2
CY	BIT	0D0H.7
TI	BIT	098H.1
INT1	BIT	0B0H.3
RCAP2H	DATA	0CBH
PS	BIT	0B8H.4
SP	DATA	081H
T2EX	BIT	090H.1
OV	BIT	0D0H.2
RCAP2L	DATA	0CAH
C_T2	BIT	0C8H.1
WR	BIT	0B0H.6
RCLK	BIT	0C8H.5
TCLK	BIT	0C8H.4
SBUF	DATA	099H
PCON	DATA	087H
SCON	DATA	098H
TMOD	DATA	089H
TCON	DATA	088H
IE0	BIT	088H.1
IE1	BIT	088H.3
B	DATA	0F0H
CP_RL2	BIT	0C8H.0
ACC	DATA	0E0H
ET0	BIT	0A8H.1
ET1	BIT	0A8H.3
TF0	BIT	088H.5
ET2	BIT	0A8H.5
TF1	BIT	088H.7
TF2	BIT	0C8H.7
RB8	BIT	098H.2
TH0	DATA	08CH
EX0	BIT	0A8H.0
IT0	BIT	088H.0
TH1	DATA	08DH
TB8	BIT	098H.3
EX1	BIT	0A8H.2
IT1	BIT	088H.2
TH2	DATA	0CDH
P	BIT	0D0H.0
SM0	BIT	098H.7
TL0	DATA	08AH
SM1	BIT	098H.6
TL1	DATA	08BH
SM2	BIT	098H.5
TL2	DATA	0CCH
PT0	BIT	0B8H.1
PT1	BIT	0B8H.3
RS0	BIT	0D0H.3
PT2	BIT	0B8H.5
TR0	BIT	088H.4
RS1	BIT	0D0H.4
TR1	BIT	088H.6
TR2	BIT	0C8H.2
PX0	BIT	0B8H.0
PX1	BIT	0B8H.2
DPH	DATA	083H
DPL	DATA	082H
EXEN2	BIT	0C8H.3
REN	BIT	098H.4
T2CON	DATA	0C8H
RXD	BIT	0B0H.0
TXD	BIT	0B0H.1
F0	BIT	0D0H.5
PSW	DATA	0D0H
?PR?Task_Sched?TASKSW                    SEGMENT CODE 
	EXTRN	CODE (OS_Search)
	EXTRN	DATA (OSPrioCur)
	EXTRN	DATA (OSRdyList)
	EXTRN	DATA (OSPrioHighRdy)
	PUBLIC	Task_Sched
; #include "os.h"
; 
; void Task_Sched(void)

	RSEG  ?PR?Task_Sched?TASKSW
Task_Sched:
	USING	0
			; SOURCE LINE # 3
; {
			; SOURCE LINE # 4
; 	EA=0;//关中断 临界段保护
			; SOURCE LINE # 5
	CLR  	EA
; 	
; 	OS_Search();
			; SOURCE LINE # 7
	LCALL	OS_Search
; 	if(OSPrioCur == First_Start)
			; SOURCE LINE # 8
	MOV  	A,OSPrioCur
	XRL  	A,#0BH
	JNZ  	?C0001
; 	{
			; SOURCE LINE # 9
; 		//第一次启动，切换最高优先级任务
; 		 SP=OSRdyList[TASK_NUM-1].Task_Sp;
			; SOURCE LINE # 11
	MOV  	SP,OSRdyList+010H
; 		 __asm POP 7        
	 POP 7        
; 		 __asm POP 6
	 POP 6
; 		 __asm POP 5
	 POP 5
; 		 __asm POP 4
	 POP 4
; 		 __asm POP 3
	 POP 3
; 		 __asm POP 2
	 POP 2
; 		 __asm POP 1
	 POP 1
; 		 __asm POP 0
	 POP 0
; 		 __asm POP DPH
	 POP DPH
; 		 __asm POP DPL
	 POP DPL
; 		 __asm POP PSW
	 POP PSW
; 		 __asm POP B
	 POP B
; 		 __asm POP ACC 
	 POP ACC 
; 		 OSPrioCur=TASK_NUM-1;
			; SOURCE LINE # 25
	MOV  	OSPrioCur,#02H
; 	}
			; SOURCE LINE # 26
?C0001:
; 	if( OSRdyList[OSPrioCur].DelayCnt != 0)
			; SOURCE LINE # 27
	MOV  	A,OSPrioCur
	MOV  	B,#08H
	MUL  	AB
	ADD  	A,#LOW (OSRdyList+06H)
	MOV  	R0,A
	MOV  	A,@R0
	MOV  	R6,A
	INC  	R0
	MOV  	A,@R0
	ORL  	A,R6
	JZ   	?C0002
; 	{
			; SOURCE LINE # 28
; 		 __asm PUSH ACC       //保护当前任务寄存器
	 PUSH ACC        
; 		 __asm PUSH B
	 PUSH B
; 		 __asm PUSH PSW
	 PUSH PSW
; 		 __asm PUSH DPL
	 PUSH DPL
; 		 __asm PUSH DPH
	 PUSH DPH
; 		 __asm PUSH 0         //0-7为工作寄存器
	 PUSH 0          
; 		 __asm PUSH 1
	 PUSH 1
; 		 __asm PUSH 2
	 PUSH 2
; 		 __asm PUSH 3
	 PUSH 3
; 		 __asm PUSH 4
	 PUSH 4
; 		 __asm PUSH 5
	 PUSH 5
; 		 __asm PUSH 6
	 PUSH 6
; 		 __asm PUSH 7
	 PUSH 7
; 		 OSRdyList[OSPrioCur].Task_Sp=SP;   //保存当前堆栈指针
			; SOURCE LINE # 42
	MOV  	A,OSPrioCur
	MOV  	B,#08H
	MUL  	AB
	ADD  	A,#LOW (OSRdyList)
	MOV  	R0,A
	MOV  	@R0,SP
; 
; 		 SP=OSRdyList[OSPrioHighRdy].Task_Sp;     //任务堆栈指针切换
			; SOURCE LINE # 44
	MOV  	A,OSPrioHighRdy
	MOV  	B,#08H
	MUL  	AB
	ADD  	A,#LOW (OSRdyList)
	MOV  	R0,A
	MOV  	A,@R0
	MOV  	SP,A
; 		 __asm POP 7         //恢复任务寄存器
	 POP 7          
; 		 __asm POP 6
	 POP 6
; 		 __asm POP 5
	 POP 5
; 		 __asm POP 4
	 POP 4
; 		 __asm POP 3
	 POP 3
; 		 __asm POP 2
	 POP 2
; 		 __asm POP 1
	 POP 1
; 		 __asm POP 0
	 POP 0
; 		 __asm POP DPH
	 POP DPH
; 		 __asm POP DPL
	 POP DPL
; 		 __asm POP PSW
	 POP PSW
; 		 __asm POP B
	 POP B
; 		 __asm POP ACC
	 POP ACC
; 		 OSPrioCur=OSPrioHighRdy;
			; SOURCE LINE # 58
	MOV  	OSPrioCur,OSPrioHighRdy
; 	}
			; SOURCE LINE # 59
?C0002:
; 		
; 	
; 	if(OSPrioHighRdy<OSPrioCur)
			; SOURCE LINE # 62
	MOV  	A,OSPrioHighRdy
	CLR  	C
	SUBB 	A,OSPrioCur
	JNC  	?C0003
; 	{
			; SOURCE LINE # 63
; 		 __asm PUSH ACC       //保护当前任务寄存器
	 PUSH ACC        
; 		 __asm PUSH B
	 PUSH B
; 		 __asm PUSH PSW
	 PUSH PSW
; 		 __asm PUSH DPL
	 PUSH DPL
; 		 __asm PUSH DPH
	 PUSH DPH
; 		 __asm PUSH 0         //0-7为工作寄存器
	 PUSH 0          
; 		 __asm PUSH 1
	 PUSH 1
; 		 __asm PUSH 2
	 PUSH 2
; 		 __asm PUSH 3
	 PUSH 3
; 		 __asm PUSH 4
	 PUSH 4
; 		 __asm PUSH 5
	 PUSH 5
; 		 __asm PUSH 6
	 PUSH 6
; 		 __asm PUSH 7
	 PUSH 7
; 		 OSRdyList[OSPrioCur].Task_Sp=SP;   //保存当前堆栈指针
			; SOURCE LINE # 77
	MOV  	A,OSPrioCur
	MOV  	B,#08H
	MUL  	AB
	ADD  	A,#LOW (OSRdyList)
	MOV  	R0,A
	MOV  	@R0,SP
; 
; 		 SP=OSRdyList[OSPrioHighRdy].Task_Sp;     //任务堆栈指针切换
			; SOURCE LINE # 79
	MOV  	A,OSPrioHighRdy
	MOV  	B,#08H
	MUL  	AB
	ADD  	A,#LOW (OSRdyList)
	MOV  	R0,A
	MOV  	A,@R0
	MOV  	SP,A
; 		 __asm POP 7         //恢复任务寄存器
	 POP 7          
; 		 __asm POP 6
	 POP 6
; 		 __asm POP 5
	 POP 5
; 		 __asm POP 4
	 POP 4
; 		 __asm POP 3
	 POP 3
; 		 __asm POP 2
	 POP 2
; 		 __asm POP 1
	 POP 1
; 		 __asm POP 0
	 POP 0
; 		 __asm POP DPH
	 POP DPH
; 		 __asm POP DPL
	 POP DPL
; 		 __asm POP PSW
	 POP PSW
; 		 __asm POP B
	 POP B
; 		 __asm POP ACC
	 POP ACC
; 		 OSPrioCur=OSPrioHighRdy;
			; SOURCE LINE # 93
	MOV  	OSPrioCur,OSPrioHighRdy
; 	 }
			; SOURCE LINE # 94
?C0003:
; 	
; 
; 	EA=1;
			; SOURCE LINE # 97
	SETB 	EA
; 	__asm RETI
	 RETI
; }
			; SOURCE LINE # 99
	RET  	
; END OF Task_Sched

	END
